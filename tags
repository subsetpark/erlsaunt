!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DECK	/Users/zax/code/erlsaunt/saunt.erl	/^-define(DECK, [{Rank, Suit} || Rank <- ?RANKS, Suit <- ?SUITS]).$/;"	d
LONG_SEQUENCE	/Users/zax/code/erlsaunt/test.hrl	/^-define(LONG_SEQUENCE, [{6, clubs}, {7, clubs}, {8, clubs}, {9, clubs}, {12, clubs}, {10, clubs}]).$/;"	d
MANY_SEQUENCES	/Users/zax/code/erlsaunt/test.hrl	/^-define(MANY_SEQUENCES, [{6, clubs}, {7, clubs}, {8, clubs}, {10, clubs}, {11, clubs}, {12, clubs}]).$/;"	d
MELD_RANKS	/Users/zax/code/erlsaunt/set.erl	/^-define(MELD_RANKS, [10, 11, 12, 13, 14]).$/;"	d
MULTIPLE_SEQUENCES	/Users/zax/code/erlsaunt/test.hrl	/^-define(MULTIPLE_SEQUENCES, [{7, clubs}, {7, diamonds}, {8, clubs}, {8, diamonds}, {9, clubs}, {9, diamonds}]).$/;"	d
MULTIPLE_SETS	/Users/zax/code/erlsaunt/set.erl	/^-define(MULTIPLE_SETS, [{10, clubs}, {11, clubs}, {10, diamonds}, {11, diamonds}, {10, hearts}, {11, hearts}, {10, spades}, {12, spades}]).$/;"	d
NO_SEQUENCES	/Users/zax/code/erlsaunt/sequence.erl	/^-define(NO_SEQUENCES, [{10, clubs}]).$/;"	d
NO_SETS	/Users/zax/code/erlsaunt/set.erl	/^-define(NO_SETS, [{10, clubs}]).$/;"	d
RANKS	/Users/zax/code/erlsaunt/saunt.erl	/^-define(RANKS, [7, 8, 9, 10, 11, 12, 13, 14]).$/;"	d
SAMPLE_HAND	/Users/zax/code/erlsaunt/test.hrl	/^-define(SAMPLE_HAND, [{6, clubs}, {7, clubs}, {11, spades}, {13, spades}, {12, spades}, {9, clubs}, {10, hearts}, {10, clubs}]).$/;"	d
SAMPLE_SET	/Users/zax/code/erlsaunt/set.erl	/^-define(SAMPLE_SET, [{10, clubs}, {10, diamonds}, {10, spades}, {11, clubs}, {11, diamonds}]).$/;"	d
SAMPLE_SUIT	/Users/zax/code/erlsaunt/test.hrl	/^-define(SAMPLE_SUIT, [{6, clubs}, {7, clubs}, {8, clubs}, {10, clubs}]).$/;"	d
SUITS	/Users/zax/code/erlsaunt/saunt.erl	/^-define(SUITS, [spades, clubs, hearts, diamonds]).$/;"	d
build_sequence	/Users/zax/code/erlsaunt/sequence.erl	/^build_sequence(Hand) -> build_sequence(Hand, []).$/;"	f	module:sequence
build_sequence	/Users/zax/code/erlsaunt/sequence.erl	/^build_sequence([H|_], Sequence) ->$/;"	f	module:sequence
build_sequence	/Users/zax/code/erlsaunt/sequence.erl	/^build_sequence([], Sequence) ->$/;"	f	module:sequence
build_sequence	/Users/zax/code/erlsaunt/sequence.erl	/^build_sequence([{HRank, _}=H, {H2Rank, _}=H2|Hand], Sequence) when H2Rank - HRank == 1 ->$/;"	f	module:sequence
compare_ranks	/Users/zax/code/erlsaunt/saunt.erl	/^compare_ranks(_, _) -> even.$/;"	f	module:saunt
compare_ranks	/Users/zax/code/erlsaunt/saunt.erl	/^compare_ranks({LeftRank, _}, {RightRank, _}) when LeftRank > RightRank -> LeftRank;$/;"	f	module:saunt
compare_ranks	/Users/zax/code/erlsaunt/saunt.erl	/^compare_ranks({LeftRank, _}, {RightRank, _}) when RightRank > LeftRank -> RightRank;$/;"	f	module:saunt
declaration	/Users/zax/code/erlsaunt/declaration.erl	/^-module(declaration).$/;"	m
hand_by_suit	/Users/zax/code/erlsaunt/saunt.erl	/^hand_by_suit(Hand) ->$/;"	f	module:saunt
longest	/Users/zax/code/erlsaunt/saunt.erl	/^longest(Ls) ->$/;"	f	module:saunt
meld	/Users/zax/code/erlsaunt/point.erl	/^meld(Hand) ->$/;"	f	module:point
meld	/Users/zax/code/erlsaunt/sequence.erl	/^meld(Hand) ->$/;"	f	module:sequence
meld	/Users/zax/code/erlsaunt/set.erl	/^meld(Hand) ->$/;"	f	module:set
meld_of	/Users/zax/code/erlsaunt/point.erl	/^meld_of(Hand) -> meld_score(Hand).$/;"	f	module:point
meld_of	/Users/zax/code/erlsaunt/sequence.erl	/^meld_of(Hand) ->$/;"	f	module:sequence
meld_of	/Users/zax/code/erlsaunt/set.erl	/^meld_of(Hand) ->$/;"	f	module:set
meld_score	/Users/zax/code/erlsaunt/point.erl	/^meld_score(Hand) ->$/;"	f	module:point
meld_score	/Users/zax/code/erlsaunt/sequence.erl	/^meld_score(Hand) ->$/;"	f	module:sequence
meld_score	/Users/zax/code/erlsaunt/set.erl	/^meld_score(Hand) ->$/;"	f	module:set
point	/Users/zax/code/erlsaunt/point.erl	/^-module(point).$/;"	m
random_hand	/Users/zax/code/erlsaunt/saunt.erl	/^random_hand() ->$/;"	f	module:saunt
saunt	/Users/zax/code/erlsaunt/saunt.erl	/^-module(saunt).$/;"	m
sequence	/Users/zax/code/erlsaunt/sequence.erl	/^-module(sequence).$/;"	m
sequence_score	/Users/zax/code/erlsaunt/sequence.erl	/^sequence_score(Sequence) ->$/;"	f	module:sequence
set	/Users/zax/code/erlsaunt/set.erl	/^-module(set).$/;"	m
set_score	/Users/zax/code/erlsaunt/set.erl	/^set_score(Set) ->$/;"	f	module:set
suit_sequences	/Users/zax/code/erlsaunt/sequence.erl	/^suit_sequences(Suit) ->$/;"	f	module:sequence
suit_sequences	/Users/zax/code/erlsaunt/sequence.erl	/^suit_sequences(Suit, Sequences) ->$/;"	f	module:sequence
suit_sequences	/Users/zax/code/erlsaunt/sequence.erl	/^suit_sequences([], Sequences) ->$/;"	f	module:sequence
test	/Users/zax/code/erlsaunt/point.erl	/^test() ->$/;"	f	module:point
test	/Users/zax/code/erlsaunt/saunt.erl	/^test() ->$/;"	f	module:saunt
test	/Users/zax/code/erlsaunt/sequence.erl	/^test() ->$/;"	f	module:sequence
test	/Users/zax/code/erlsaunt/set.erl	/^test() ->$/;"	f	module:set
trump_hand	/Users/zax/code/erlsaunt/saunt.erl	/^trump_hand(_, Follow) -> Follow.$/;"	f	module:saunt
trump_hand	/Users/zax/code/erlsaunt/saunt.erl	/^trump_hand({LeadRank, _}=Lead, {FollowRank, _}) when LeadRank > FollowRank -> Lead;$/;"	f	module:saunt
trump_hand	/Users/zax/code/erlsaunt/saunt.erl	/^trump_hand({_, LeadSuit}=Lead, {_, FollowSuit}) when LeadSuit \/= FollowSuit -> Lead;$/;"	f	module:saunt
